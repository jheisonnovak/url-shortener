services:
    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports:
            - "5672:5672"
            - "15672:15672"
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - microservices_network
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 10s
            timeout: 5s
            retries: 5

    postgres-auth-master:
        image: postgres:16
        container_name: postgres-auth-master
        ports:
            - "5433:5432"
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=postgres
            - REPLICATOR_PASSWORD=replicator123
        volumes:
            - postgres_auth_data:/var/lib/postgresql/data
            - postgres_auth_archive:/var/lib/postgresql/archive
            - ./postgres-auth-master/postgresql.conf:/etc/postgresql/postgresql.conf
            - ./postgres-auth-master/pg_hba.conf:/etc/postgresql/pg_hba.conf
            - ./postgres-auth-master/init-auth-master.sh:/docker-entrypoint-initdb.d/init-auth-master.sh
        command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
        networks:
            - microservices_network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    postgres-shortener-master:
        image: postgres:16
        container_name: postgres-shortener-master
        ports:
            - "5434:5432"
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=postgres
            - REPLICATOR_PASSWORD=replicator123
        volumes:
            - postgres_shortener_master_data:/var/lib/postgresql/data
            - postgres_shortener_archive:/var/lib/postgresql/archive
            - ./postgres-shortener-master/postgresql.conf:/etc/postgresql/postgresql.conf
            - ./postgres-shortener-master/pg_hba.conf:/etc/postgresql/pg_hba.conf
            - ./postgres-shortener-master/init-shortener-master.sh:/docker-entrypoint-initdb.d/init-shortener-master.sh
        command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
        networks:
            - microservices_network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    postgres-shortener-slave1:
        image: postgres:16
        container_name: postgres-shortener-slave1
        ports:
            - "5435:5432"
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=postgres
            - REPLICATOR_PASSWORD=replicator123
            - PGUSER=${DB_USERNAME}
        volumes:
            - postgres_shortener_slave1_data:/var/lib/postgresql/data
            - ./postgres-shortener-slave/postgresql.conf:/etc/postgresql/postgresql.conf
            - ./postgres-shortener-slave/pg_hba.conf:/etc/postgresql/pg_hba.conf
            - ./postgres-shortener-slave/setup-slave.sh:/docker-entrypoint-initdb.d/setup-slave.sh
        entrypoint: ["/docker-entrypoint-initdb.d/setup-slave.sh"]
        user: root
        depends_on:
            postgres-shortener-master:
                condition: service_healthy
        networks:
            - microservices_network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 15s
            timeout: 10s
            retries: 10
            start_period: 60s

    postgres-shortener-slave2:
        image: postgres:16
        container_name: postgres-shortener-slave2
        ports:
            - "5436:5432"
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=postgres
            - REPLICATOR_PASSWORD=replicator123
            - PGUSER=${DB_USERNAME}
        volumes:
            - postgres_shortener_slave2_data:/var/lib/postgresql/data
            - ./postgres-shortener-slave/postgresql.conf:/etc/postgresql/postgresql.conf
            - ./postgres-shortener-slave/pg_hba.conf:/etc/postgresql/pg_hba.conf
            - ./postgres-shortener-slave/setup-slave.sh:/docker-entrypoint-initdb.d/setup-slave.sh
        entrypoint: ["/docker-entrypoint-initdb.d/setup-slave.sh"]
        user: root
        depends_on:
            postgres-shortener-master:
                condition: service_healthy
        networks:
            - microservices_network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 15s
            timeout: 10s
            retries: 10
            start_period: 60s

    pgadmin:
        image: dpage/pgadmin4
        container_name: pgadmin
        depends_on:
            - postgres-auth-master
            - postgres-shortener-master
        ports:
            - "5050:80"
        environment:
            - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
            - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        networks:
            - microservices_network

    pgbouncer:
        image: edoburu/pgbouncer
        container_name: pgbouncer
        ports:
            - "6432:6432"
        environment:
            DB_USER: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
        volumes:
            - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
            - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        depends_on:
            - postgres-auth-master
            - postgres-shortener-master
            - postgres-shortener-slave1
            - postgres-shortener-slave2
        networks:
            - microservices_network

    redis:
        image: redis:7
        container_name: redis
        ports:
            # - "6379:6379"
            - "15642:6379"
        networks:
            - microservices_network

    auth-service:
        build:
            context: .
            dockerfile: apps/auth-service/Dockerfile
        container_name: auth-service
        env_file:
            - .env
        depends_on:
            - postgres-auth-master
            - rabbitmq
        networks:
            - microservices_network
        restart: unless-stopped
        command: sh -c "
            until nc -z postgres-auth-master 5432; do
            echo 'Waiting for Auth Postgres...';
            sleep 2;
            done;
            until nc -z rabbitmq 5672; do
            echo 'Waiting for RabbitMQ...';
            sleep 2;
            done;
            node dist/apps/auth-service/main
            "

    url-shortener:
        build:
            context: .
            dockerfile: apps/url-shortener/Dockerfile
        container_name: url-shortener
        env_file:
            - .env
        depends_on:
            - postgres-shortener-master
            - postgres-shortener-slave1
            - postgres-shortener-slave2
            - rabbitmq
            - redis
        networks:
            - microservices_network
        restart: unless-stopped
        command: sh -c "
            until nc -z postgres-shortener-master 5432; do
            echo 'Waiting for URL Shortener Master Postgres...';
            sleep 2;
            done;
            until nc -z postgres-shortener-slave1 5432; do
            echo 'Waiting for URL Shortener Slave1 Postgres...';
            sleep 2;
            done;
            until nc -z postgres-shortener-slave2 5432; do
            echo 'Waiting for URL Shortener Slave2 Postgres...';
            sleep 2;
            done;
            until nc -z rabbitmq 5672; do
            echo 'Waiting for RabbitMQ...';
            sleep 2;
            done;
            node dist/apps/url-shortener/main
            "

    api-gateway:
        build:
            context: .
            dockerfile: apps/api-gateway/Dockerfile
        container_name: api-gateway
        env_file:
            - .env
        ports:
            - "2000:2000"
        depends_on:
            - auth-service
            - url-shortener
        networks:
            - microservices_network
        restart: unless-stopped
        command: sh -c "
            until nc -z postgres-auth-master 5432; do
            echo 'Waiting for Auth Postgres...';
            sleep 2;
            done;
            until nc -z postgres-shortener-master 5432; do
            echo 'Waiting for URL Shortener Postgres...';
            sleep 2;
            done;
            until nc -z rabbitmq 5672; do
            echo 'Waiting for RabbitMQ...';
            sleep 2;
            done;
            node dist/apps/api-gateway/main
            "

volumes:
    postgres_auth_data:
    postgres_auth_archive:
    postgres_shortener_master_data:
    postgres_shortener_slave1_data:
    postgres_shortener_slave2_data:
    postgres_shortener_archive:
    rabbitmq_data:
    pgadmin_data:

networks:
    microservices_network:
        driver: bridge
